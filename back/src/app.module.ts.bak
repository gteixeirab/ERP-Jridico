import { Module, Logger } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { ThrottlerModule } from '@nestjs/throttler';
import { APP_GUARD } from '@nestjs/core';

// Módulos da aplicação
import { AppController } from './app.controller';
import { AuthModule } from './auth/auth.module';
import { PrismaModule } from './prisma/prisma.module';
import { UsersModule } from './users/users.module';
import { JwtAuthGuard } from './auth/guards/jwt-auth.guard';

/**
 * Módulo raiz da aplicação.
 * Configura todos os módulos e serviços globais.
 */
@Module({
  imports: [
    // Configuração global do módulo de configuração
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: ['.env', '.env.local'],
      cache: true,
      expandVariables: true,
    }),
    
    // Configuração de rate limiting
    ThrottlerModule.forRootAsync({
      imports: [ConfigModule],
      inject: [ConfigService],
      useFactory: (config: ConfigService) => ({
        ttl: config.get<number>('THROTTLE_TTL', 60),
        limit: config.get<number>('THROTTLE_LIMIT', 100),
      }),
    }),
    
    // Módulos da aplicação
    PrismaModule,
    AuthModule,
    UsersModule,
  ],
  controllers: [AppController],
  providers: [
    // Aplica o JwtAuthGuard globalmente a todos os endpoints
    {
      provide: APP_GUARD,
      useClass: JwtAuthGuard,
    },
    Logger,
  ],
})
export class AppModule {
  constructor(private readonly config: ConfigService) {
    const nodeEnv = this.config.get<string>('NODE_ENV', 'development');
    const port = this.config.get<number>('PORT', 3000);
    
    // Loga informações de inicialização
    const logger = new Logger('Bootstrap');
    logger.log(`Ambiente: ${nodeEnv}`);
    logger.log(`Servidor rodando na porta: ${port}`);
    
    // Valida variáveis de ambiente obrigatórias
    this.validateEnvVars();
  }
  
  /**
   * Valida as variáveis de ambiente obrigatórias
   * @private
   */
  private validateEnvVars(): void {
    const requiredVars = [
      'DATABASE_URL',
      'JWT_SECRET',
    ];
    
    const missingVars = requiredVars.filter(
      (varName) => !this.config.get(varName)
    );
    
    if (missingVars.length > 0) {
      throw new Error(
        `Variáveis de ambiente obrigatórias não definidas: ${missingVars.join(', ')}`
      );
    }
  }
